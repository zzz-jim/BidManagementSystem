using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using System.Data.Entity;

namespace PF.DomainModel
{
    public class BaseStore<TObject> : IBaseStore<TObject> where TObject : class
    {
        private bool _disposed;
        protected DbContext Context = null;
    
        //The Store has two running modes: exclusive mode and shared mode.
        //独占模式: The data context is generated by Repository, 
        //the data objects only use in the Store's data context (Update, Delete).
        //共享模式: In many scenarios, we maybe use over 1 repository at the same time. 
        //If Stores have their own data context, it may cause the data duplicate issue.
        //So we need to pass the shared data context to Stores in transaction on construction.
        private bool shareContext = false;

        //独占模式
        public BaseStore()
        {
            Context = new PF.DomainModel.Identity.ApplicationDbContext();
        }
    
        //共享模式
        public BaseStore(DbContext context)
        {
            Context = context;
            shareContext = true;
        }
        #region 释放资源
        public bool DisposeContext
        {
            get;
            set;
        }


        private void ThrowIfDisposed()
        {
            if (this._disposed)
            {
                throw new ObjectDisposedException(this.GetType().Name);
            }
        }


        public void Dispose()
        {
                this.Dispose(true);
                GC.SuppressFinalize(this);
            
        }


        protected virtual void Dispose(bool disposing)
        {
            //独占模式需要指定DisposeContext为true分别释放资源   
            if ((this.DisposeContext||shareContext) && disposing && this.Context != null)
            {
                this.Context.Dispose();
            }
            this._disposed = true;
            this.Context = null;
           
        }
        #endregion
    
        #region 同步
        protected DbSet<TObject> DbSet
        {
          
            get
            {
                this.ThrowIfDisposed();
                return Context.Set<TObject>();
            }
        }



        public virtual IQueryable<TObject> All()
        {
             this.ThrowIfDisposed();
            return DbSet.AsQueryable();
        }
        public virtual IQueryable<TObject> All(Expression<Func<TObject, bool>> predicate)
        {
       
            this.ThrowIfDisposed();
            return DbSet.Include(predicate).AsQueryable();
        }
        public virtual IQueryable<TObject>
        Filter(Expression<Func<TObject, bool>> predicate)
        {
            this.ThrowIfDisposed();
            return DbSet.Where(predicate).AsQueryable<TObject>();
        }

        public virtual IQueryable<TObject> Filter(Expression<Func<TObject, bool>> filter,
         out int total, int index = 0, int size = 50)
        {
            this.ThrowIfDisposed();
            int skipCount = index * size;
            var _resetSet = filter != null ? DbSet.Where(filter).AsQueryable() :
                DbSet.AsQueryable();
            _resetSet = skipCount == 0 ? _resetSet.Take(size) :
                _resetSet.Skip(skipCount).Take(size);
            total = _resetSet.Count();
            return _resetSet.AsQueryable();
        }

        public bool Contains(Expression<Func<TObject, bool>> predicate)
        {
            this.ThrowIfDisposed();
            return DbSet.Count(predicate) > 0;
        }

        public virtual TObject GetById(params object[] keys)
        {
            this.ThrowIfDisposed();
            return DbSet.Find(keys);
        }


        public virtual TObject First(Expression<Func<TObject, bool>> predicate)
        {
            this.ThrowIfDisposed();
            return DbSet.FirstOrDefault(predicate);
        }

        public virtual TObject Create(TObject TObject)
        {
            this.ThrowIfDisposed();
            var newEntry = DbSet.Add(TObject);
            if (!shareContext)
                Context.SaveChanges();
            return newEntry;
        }


        public virtual int Count
        {
            get
            {
                this.ThrowIfDisposed();
                return DbSet.Count();
            }
        }


        public virtual int Update(TObject TObject)
        {
            this.ThrowIfDisposed();
            var entry = Context.Entry(TObject);
            DbSet.Attach(TObject);
            entry.State = EntityState.Modified;
            if (!shareContext)
                return Context.SaveChanges();
            return 0;
        }

        public virtual int Delete(TObject TObject)
        {
            this.ThrowIfDisposed();
            DbSet.Remove(TObject);
            if (!shareContext)
                return Context.SaveChanges();
            return 0;
        }


        public virtual int Delete(Expression<Func<TObject, bool>> predicate)
        {
            this.ThrowIfDisposed();
            var objects = Filter(predicate);
            //foreach (var obj in objects)
            //    DbSet.Remove(obj);
            DbSet.RemoveRange(objects);
            if (!shareContext)
                return Context.SaveChanges();
            return 0;
        }

        /// <summary>
        /// 直接执行SQL命令
        /// </summary>
        /// <param name="t">SQL命令</param>
       public int Sql(string t)
       {
          return this.Context.Database.ExecuteSqlCommand(t);
       }

        #endregion
        #region 异步
        public virtual Task<int> CreateAsync(TObject TObject)
        {
            this.ThrowIfDisposed();
            var newEntry = DbSet.Add(TObject);
            if (!shareContext)
                return Context.SaveChangesAsync();
            return new Task<int>(doNothing);
        }
        public virtual Task<TObject> GetByIdAsync(params object[] keys)
        {
            this.ThrowIfDisposed();
            return DbSet.FindAsync(keys);
        }

        public virtual Task<TObject> FirstAsync(Expression<Func<TObject, bool>> predicate)
        {
            this.ThrowIfDisposed();
            return DbSet.FirstOrDefaultAsync(predicate);
        }

        public virtual Task<int> UpdateAsync(TObject TObject)
        {
            this.ThrowIfDisposed();
            var entry = Context.Entry(TObject);
            DbSet.Attach(TObject);
            entry.State = EntityState.Modified;
            if (!shareContext)
                return Context.SaveChangesAsync();
            return new Task<int>(doNothing);
        }

        public virtual Task<int> DeleteAsync(TObject TObject)
        {
            this.ThrowIfDisposed();
            DbSet.Remove(TObject);
            if (!shareContext)
                return Context.SaveChangesAsync();
            return new Task<int>(doNothing);
        }

        public virtual Task<int> DeleteAsync(Expression<Func<TObject, bool>> predicate)
        {
            this.ThrowIfDisposed();
            var objects = Filter(predicate);
            DbSet.RemoveRange(objects);
            if (!shareContext)
                return Context.SaveChangesAsync();
            return new Task<int>(doNothing);
        }

         /// <summary>
        /// 异步执行SQL命令
        /// </summary>
        /// <param name="t">SQL命令</param>
       public  virtual Task<int> SqlAsync(string t){
            return this.Context.Database.ExecuteSqlCommandAsync(t);
        }
        #endregion

        private int doNothing() { return 0; }

  

       
    }
}
